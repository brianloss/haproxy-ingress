{{- $ing := . -}}
{{- $cfg := .Cfg -}}
global
    daemon
    stats socket {{ $cfg.StatsSocket }} level admin expose-fd listeners
{{- if $cfg.LoadServerState }}
    server-state-file state-global
    server-state-base /var/lib/haproxy/
{{- end}}
    maxconn {{ $cfg.MaxConn }}
{{- if ne $cfg.TimeoutStop "" }}
    hard-stop-after {{ $cfg.TimeoutStop }}
{{- end }}
{{- if ne $cfg.Syslog "" }}
    log {{ $cfg.Syslog }} format rfc5424 local0
    log-tag ingress
{{- end }}
    lua-load /usr/local/etc/haproxy/lua/send-response.lua
{{- if ne $cfg.SSLDHParam.Filename "" }}
    # DH PEM checksum: {{ $cfg.SSLDHParam.PemSHA }}
    ssl-dh-param-file {{ $cfg.SSLDHParam.Filename }}
{{- else }}
    tune.ssl.default-dh-param {{ $cfg.SSLDHParam.DefaultMaxSize }}
{{- end }}
    ssl-default-bind-ciphers {{ $cfg.SSLCiphers }}
    ssl-default-bind-options {{ $cfg.SSLOptions }}

defaults
    log global
{{- if $cfg.LoadServerState }}
    load-server-state-from-file global
{{- end }}
    maxconn {{ $cfg.MaxConn }}
{{- if $cfg.DrainSupport }}
    option persist
{{- else }}
    option redispatch
{{- end }}
    option dontlognull
    option http-server-close
    option http-keep-alive
    timeout http-request    {{ $cfg.TimeoutHTTPRequest }}
    timeout connect         {{ $cfg.TimeoutConnect }}
    timeout client          {{ $cfg.TimeoutClient }}
    timeout client-fin      {{ $cfg.TimeoutClientFin }}
    timeout queue           {{ $cfg.TimeoutQueue }}
    timeout server          {{ $cfg.TimeoutServer }}
    timeout server-fin      {{ $cfg.TimeoutServerFin }}
    timeout tunnel          {{ $cfg.TimeoutTunnel }}
    timeout http-keep-alive {{ $cfg.TimeoutKeepAlive }}
{{- if ne (len $ing.Userlists) 0 }}

######
###### Userlists
######
{{- range $userlist := $ing.Userlists }}
userlist {{ $userlist.ListName }}
{{- range $user := $userlist.Users }}
    user {{ $user.Username }} {{ if not $user.Encrypted }}insecure-{{ end }}password {{ $user.Password }}
{{- end }}
{{- end }}
{{- end }}

{{- if ne (len $ing.TCPEndpoints) 0 }}

######
###### TCP services
######
{{- range $tcp := $ing.TCPEndpoints }}
listen tcp-{{ $tcp.Port }}
{{- $inProxyProt := $tcp.Backend.ProxyProtocol.Decode }}
{{- $outProxyProtVersion := $tcp.Backend.ProxyProtocol.EncodeVersion }}
    bind {{ $cfg.BindIPAddrTCP }}:{{ $tcp.Port }}{{ if $inProxyProt }} accept-proxy{{ end }}
    mode tcp
{{- if ne $cfg.Syslog "" }}
{{- if eq $cfg.TCPLogFormat "" }}
    option tcplog
{{- else }}
    log-format {{ $cfg.TCPLogFormat }}
{{- end }}
{{- end }}
{{- range $endpoint := $tcp.Endpoints }}
{{- $target := (print $endpoint.Address ":" $endpoint.Port) }}
    server {{ $target }} {{ $target }} check port {{ $endpoint.Port }} inter {{ $cfg.BackendCheckInterval }}{{ if eq $outProxyProtVersion "v1" }} send-proxy{{ else if eq $outProxyProtVersion "v2" }} send-proxy-v2{{ end }}
{{- end }}
{{- end }}{{/* range TCP services */}}
{{- end }}{{/* if has TCP services */}}

######
###### Backends
######
{{- range $backend := $ing.Backends }}
backend {{ $backend.Name }}
    mode {{ if $backend.SSLPassthrough }}tcp{{ else }}http{{ end }}
    balance {{ $backend.BalanceAlgorithm }}
{{- if ne $backend.Connection.TimeoutQueue "" }}
    timeout queue {{ $backend.Connection.TimeoutQueue }}
{{- end }}
{{- if ne $backend.HealthCheckURI "" }}
    option httpchk GET {{ $backend.HealthCheckURI }} HTTP/1.1
{{- end }}
{{- $sticky := $backend.SessionAffinity }}
{{- if eq $sticky.AffinityType "cookie" }}
    cookie {{ $sticky.CookieSessionAffinity.Name }} {{ $sticky.CookieSessionAffinity.Strategy }} {{ if eq $sticky.CookieSessionAffinity.Strategy "insert" }}indirect nocache httponly{{ end }} dynamic
{{- if ne $cfg.CookieKey "<server-name>" }}
    dynamic-cookie-key "{{ $cfg.CookieKey }}"
{{- end }}
{{- end }}
{{- range $snippet := $backend.ConfigurationSnippet.Backend }}
    {{ $snippet }}
{{- end }}
{{- $cacert := $backend.SecureCACert }}
{{- if ne $cacert.PemSHA "" }}
    # CA PEM checksum: {{ $cacert.PemSHA }}
{{- end }}
{{- $BackendSlots := index $ing.BackendSlots $backend.Name }}
{{- range $target, $slot := $BackendSlots.FullSlots }}
    server {{ $slot.BackendServerName }} {{ $target }} {{ if gt $backend.Connection.MaxConnServer 0 }}maxconn {{ $backend.Connection.MaxConnServer }} {{ end }}{{ if gt $backend.Connection.MaxQueueServer 0 }}maxqueue {{ $backend.Connection.MaxQueueServer }} {{ end }}{{ if $backend.Secure }}ssl {{ if ne $cacert.CAFileName "" }}verify required ca-file {{ $cacert.CAFileName }} {{ else }}verify none {{ end }}{{ end }}{{ if ge $slot.BackendEndpoint.Weight 0 }}weight {{ $slot.BackendEndpoint.Weight }} {{ end }}check port {{ if gt $backend.HealthCheckPort 0 }}{{ $backend.HealthCheckPort }}{{ else }}{{ $slot.BackendEndpoint.Port }}{{ end }} inter {{ $cfg.BackendCheckInterval }} fall {{ $cfg.BackendCheckFallCount }} rise {{ $cfg.BackendCheckRiseCount }}{{ if gt $backend.AgentPort 0 }} agent-check agent-port {{ $backend.AgentPort }} agent-inter {{ $cfg.BackendCheckInterval }}{{ end }}{{ if and (eq $sticky.AffinityType "cookie") ($cfg.CookieKey eq "<server-name>") }} cookie {{ $slot.BackendServerName }}{{ end }}
{{- end }}
{{- range $empty := $BackendSlots.EmptySlots }}
    server {{ $empty }} 127.0.0.1:81 {{ if gt $backend.Connection.MaxConnServer 0 }}maxconn {{ $backend.Connection.MaxConnServer }} {{ end }}{{ if gt $backend.Connection.MaxQueueServer 0 }}maxqueue {{ $backend.Connection.MaxQueueServer }} {{ end }}{{ if $backend.Secure }}ssl {{ if ne $cacert.CAFileName "" }}verify required ca-file {{ $cacert.CAFileName }} {{ else }}verify none {{ end }}{{ end }}check disabled inter {{ $cfg.BackendCheckInterval }} fall {{ $cfg.BackendCheckFallCount }} rise {{ $cfg.BackendCheckRiseCount }}{{ if gt $backend.AgentPort 0 }} agent-check agent-port {{ $backend.AgentPort }} agent-inter {{ $cfg.BackendCheckInterval }}{{ end }}{{ if and (eq $sticky.AffinityType "cookie") ($cfg.CookieKey eq "<server-name>") }} cookie {{ $slot.BackendServerName }}{{ end }}
{{- end }}
{{- end }}{{/* range Backends */}}

######
###### HTTPS frontend (tcp mode)
######
frontend httpsfront
    bind {{ $cfg.BindIPAddrHTTP }}:443{{ if $cfg.UseProxyProtocol }} accept-proxy{{ end }}
    mode tcp

{{- if ne $cfg.Syslog "" }}
{{- if eq $cfg.HTTPSLogFormat "default" }}
    option tcplog
{{- else if ne $cfg.HTTPSLogFormat "" }}
    log-format {{ $cfg.HTTPSLogFormat }}
{{- end }}
{{- end }}
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }

{{- range $server := $ing.HAServers }}
{{- if $server.IsCACert }}
    {{- template "acl" map $cfg $server "req.ssl_sni" false }}
{{- end }}
{{- end }}

{{- range $server := $ing.HAPassthrough }}
{{- if $server.HostnameIsWildcard }}
    use_backend {{ $server.Backend }} if { req.ssl_sni -m reg -i {{ hostnameRegex $server.Hostname }} }
{{- else }}
    use_backend {{ $server.Backend }} if { req.ssl_sni -i {{ $server.Hostname }} }
{{- end }}
{{- end }}

{{- range $server := $ing.HAServers }}
{{- if $server.IsCACert }}
    use_backend httpsback-{{ $server.HostnameLabel }} if {{ $server.ACLLabel }}
{{- end }}
{{- end }}
    default_backend httpsback-shared-backend

######
###### HTTP(S) frontend - shared http mode
######
backend httpback-shared-backend
    mode http
    server shared-http-frontend unix@/var/run/haproxy-http.sock send-proxy-v2
backend httpsback-shared-backend
    mode tcp
    server shared-https-frontend unix@/var/run/haproxy-https.sock send-proxy-v2
    {{- template "http_front" map $ing $cfg nil }}

{{- range $server := $ing.HAServers }}
{{- if $server.IsCACert }}

######
###### HTTPS frontend - cacert - {{ $server.Hostname }}
######
backend httpsback-{{ $server.HostnameLabel }}
    mode tcp
    server {{ $server.HostnameLabel }} unix@/var/run/haproxy-https-{{ $server.HostnameSocket }}.sock send-proxy-v2
    {{- template "http_front" map $ing $cfg $server }}
{{- end }}
{{- end }}

######
###### HTTP frontend - default backend
######
backend httpback-default-backend
    mode http
    server shared-http-frontend unix@/var/run/haproxy-http-{{ $ing.DefaultServer.HostnameSocket }}.sock send-proxy-v2
    {{- template "http_front" map $ing $cfg $ing.DefaultServer }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "http_front" }}
{{- $ing := .p1 }}
{{- $cfg := .p2 }}
{{- $singleserver := .p3 }}
{{- $isShared := isShared $singleserver }}
{{- $isDefault := isDefault $singleserver }}
{{- $isCACert := isCACert $singleserver }}
{{- $servers := getServers $ing.HAServers $singleserver }}
{{- $hasHTTPStoHTTP := gt $cfg.HTTPStoHTTPPort 0 }}
{{- $reuseHTTPPort := eq $cfg.HTTPStoHTTPPort 80 }}
frontend httpfront-{{ if $isShared }}shared-frontend{{ else if $isDefault }}default-backend{{ else }}{{ $singleserver.Hostname }}{{ end }}
{{- if $isShared }}
    bind {{ $cfg.BindIPAddrHTTP }}:80{{ if $cfg.UseProxyProtocol }} accept-proxy{{ end }}
{{- if and $hasHTTPStoHTTP (not $reuseHTTPPort) }}
    bind {{ $cfg.BindIPAddrHTTP }}:{{ $cfg.HTTPStoHTTPPort }}{{ if $cfg.UseProxyProtocol }} accept-proxy{{ end }}
{{- end }}
    bind unix@/var/run/haproxy-http.sock accept-proxy
{{- end }}
{{- range $server := $servers }}
{{- if $server.UseHTTPS }}
    # CRT PEM checksum: {{ $server.SSLPemChecksum }}{{ if $isShared }} - {{ $server.Hostname }}{{ end }}
{{- end }}
{{- end }}
{{- if $isCACert }}
    # CA PEM checksum: {{ $singleserver.CertificateAuth.AuthSSLCert.PemSHA }}
{{- end }}
{{- if $isDefault }}
    bind unix@/var/run/haproxy-http-{{ $singleserver.HostnameSocket }}.sock accept-proxy
{{- else }}
    bind unix@/var/run/haproxy-https{{ if not $isShared }}-{{ $singleserver.HostnameSocket }}{{ end }}.sock ssl alpn h2,http/1.1 crt {{ if $isShared }}/ingress-controller/ssl{{ else }}{{ $singleserver.SSLCertificate }}{{ end }}{{ if $isCACert }} ca-file {{ $singleserver.CertificateAuth.AuthSSLCert.CAFileName }} verify optional ca-ignore-err all crt-ignore-err all{{ end }} accept-proxy
{{- end }}
    mode http

{{- /*------------------------------------*/}}
{{- if ne $cfg.Syslog "" }}
{{- if eq $cfg.HTTPLogFormat "" }}
    option httplog
{{- else }}
    log-format {{ $cfg.HTTPLogFormat }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $hasHTTPStoHTTP }}
    acl from-https var(txn.hdr_proto) https
{{- if not $reuseHTTPPort }}
    acl from-https dst_port eq {{ $cfg.HTTPStoHTTPPort }}
{{- end }}
{{- end }}
    acl from-https ssl_fc
    acl ssl-offload ssl_fc

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
    {{- template "acl" map $cfg $server "var(txn.hdr_host)" true }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $isShared $singleserver.HasRateLimit }}
    stick-table type ip size 200k expire 5m store conn_cur,conn_rate(1s)
    tcp-request content track-sc1 src
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-var(txn.hdr_host) req.hdr(host)
{{- if $hasHTTPStoHTTP }}
    http-request set-var(txn.hdr_proto) hdr(x-forwarded-proto)
{{- if not $reuseHTTPPort }}
    http-request set-header X-Forwarded-Proto https if from-https
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- range $location := $server.Locations }}
{{- $conn_cur_limit := $location.RateLimit.Connections.Limit }}
{{- $conn_rate_limit := $location.RateLimit.RPS.Limit }}
{{- if gt $conn_cur_limit 0 }}
    http-request deny if {{ $server.ACLLabel }}{{ $location.HAMatchPath }}{{ if ne $location.HARateLimitWhiteList "" }} !{ src{{ $location.HARateLimitWhiteList }} }{{ end }} { sc1_conn_cur gt {{ $conn_cur_limit }} }
{{- end }}
{{- if gt $conn_rate_limit 0 }}
    http-request deny if {{ $server.ACLLabel }}{{ $location.HAMatchPath }}{{ if ne $location.HARateLimitWhiteList "" }} !{ src{{ $location.HARateLimitWhiteList }} }{{ end }} { sc1_conn_rate gt {{ $conn_rate_limit }} }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- if and $server.IsCACert (not $isCACert) }}
    http-request deny if from-https {{ $server.ACLLabel }}
{{- else }}
{{- range $location := $server.Locations }}
{{- if ne $location.HAWhitelist "" }}
    http-request deny if {{ $server.ACLLabel }}{{ $location.HAMatchPath }} !{ src{{ $location.HAWhitelist }} }
{{- end }}
{{- $listName := $location.Userlist.ListName }}
{{- if ne $listName "" }}
{{- $realm := $location.Userlist.Realm }}
    http-request auth {{ if ne $realm "" }}realm "{{ $realm }}" {{ end }}if {{ $server.ACLLabel }}{{ $location.HAMatchPath }} !{ http_auth({{ $listName }}) }
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-header X-Forwarded-Proto https if ssl-offload
{{- if $isCACert }}
    http-request set-header {{ $cfg.SSLHeadersPrefix }}-Client-SHA1  %{+Q}[ssl_c_sha1,hex]   if {{ $singleserver.ACLLabel }} ssl-offload
    http-request set-header {{ $cfg.SSLHeadersPrefix }}-Client-DN    %{+Q}[ssl_c_s_dn]       if {{ $singleserver.ACLLabel }} ssl-offload
    http-request set-header {{ $cfg.SSLHeadersPrefix }}-Client-CN    %{+Q}[ssl_c_s_dn(cn)]   if {{ $singleserver.ACLLabel }} ssl-offload
{{- if $singleserver.CertificateAuth.CertHeader }}
    http-request set-header {{ $cfg.SSLHeadersPrefix }}-Client-Cert  %{+Q}[ssl_c_der,base64] if {{ $singleserver.ACLLabel }} ssl-offload
{{- else }}
    http-request del-header {{ $cfg.SSLHeadersPrefix }}-Client-Cert  if {{ $singleserver.ACLLabel }} ssl-offload
{{- end }}
{{- else }}
    http-request del-header {{ $cfg.SSLHeadersPrefix }}-Client-Cert  if ssl-offload
    http-request del-header {{ $cfg.SSLHeadersPrefix }}-Client-SHA1  if ssl-offload
    http-request del-header {{ $cfg.SSLHeadersPrefix }}-Client-DN    if ssl-offload
    http-request del-header {{ $cfg.SSLHeadersPrefix }}-Client-CN    if ssl-offload
{{- end }}
    http-request set-var(txn.path) path

{{- /*------------------------------------*/}}
{{- if eq $cfg.Forwardfor "add" }}
    http-request del-header x-forwarded-for
    option forwardfor
{{- else if eq $cfg.Forwardfor "ifmissing" }}
    option forwardfor if-none
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- if $server.CORS }}
{{- if $server.CORS.CorsEnabled }}
    # skip backend on CORS preflight - {{ $server.Hostname }}
    http-request use-service lua.send-response if METH_OPTIONS {{ $server.ACLLabel }}
{{- end }}
{{- else }}
{{- range $location := $server.Locations }}
{{- if $location.CORS.CorsEnabled }}
    # skip backend on CORS preflight - {{ $server.Hostname }}/{{ $location.Path }}
    http-request use-service lua.send-response if METH_OPTIONS {{ $server.ACLLabel }}{{ $location.HAMatchTxnPath }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- range $location := $server.Locations }}
{{- $rewriteTarget := $location.Rewrite.Target }}
{{- if ne $rewriteTarget "" }}
{{- if eq $rewriteTarget "/" }}
    reqrep ^([^\ :]*)\ {{ $location.Path }}/?(.*$) \1\ {{ $rewriteTarget }}\2 if {{ if $location.SSLRedirect }}from-https {{ end }}{{ $server.ACLLabel }} { var(txn.path) -m beg {{ $location.Path }} }
{{- else }}
    reqrep ^([^\ :]*)\ {{ $location.Path }}(.*$) \1\ {{ $rewriteTarget }}{{ if hasSuffix $location.Path "/" }}/{{ end }}\2 if {{ if $location.SSLRedirect }}from-https {{ end }}{{ $server.ACLLabel }} { var(txn.path) -m beg {{ $location.Path }} }
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- if $server.SSLRedirect }}
    redirect scheme https if !from-https {{ $server.ACLLabel }}
{{- else }}
{{- range $location := $server.Locations }}
{{- if $location.SSLRedirect }}
    redirect scheme https if !from-https {{ $server.ACLLabel }}{{ $location.HAMatchTxnPath }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $isCACert }}
{{- if eq $singleserver.CertificateAuth.ErrorPage "" }}
    use_backend error495 if {{ $singleserver.ACLLabel }} { ssl_c_ca_err gt 0 } || { ssl_c_err gt 0 }
    use_backend error496 if {{ $singleserver.ACLLabel }} ssl-offload !{ ssl_c_used }
{{- else }}
    redirect location {{ $singleserver.CertificateAuth.ErrorPage }} if {{ $singleserver.ACLLabel }} { ssl_c_ca_err gt 0 } || { ssl_c_err gt 0 }
    redirect location {{ $singleserver.CertificateAuth.ErrorPage }} if {{ $singleserver.ACLLabel }} ssl-offload !{ ssl_c_used }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- $appRoot := $server.RootLocation.Rewrite.AppRoot }}
{{- if ne $appRoot "" }}
    redirect location {{ $appRoot }} if {{ $server.ACLLabel }} { var(txn.path) -m str / }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- range $location := $server.Locations }}
{{- if ne $location.Proxy.BodySize "" }}
    use_backend error413 if {{ $server.ACLLabel }} { var(txn.path) -m beg {{ $location.Path }} } { req.body_size gt {{ sizeSuffix $location.Proxy.BodySize }} }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- if $server.HSTS }}
{{- $hsts := $server.HSTS }}
{{- if $hsts.Enable }}
    http-response set-header Strict-Transport-Security "max-age={{ $hsts.MaxAge }}{{ if $hsts.Subdomains }}; includeSubDomains{{ end }}{{ if $hsts.Preload }}; preload{{ end }}" if from-https {{ $server.ACLLabel }}
{{- end }}
{{- else }}
{{- range $location := $server.Locations }}
{{- $hsts := $location.HSTS }}
{{- if $hsts.Enable }}
    http-response set-header Strict-Transport-Security "max-age={{ $hsts.MaxAge }}{{ if $hsts.Subdomains }}; includeSubDomains{{ end }}{{ if $hsts.Preload }}; preload{{ end }}" if from-https {{ $server.ACLLabel }}{{ $location.HAMatchTxnPath }}
{{- end }}
{{- end }}
{{- end }}{{/* if/else $server.HSTS */}}
{{- if $server.CORS }}
{{- if $server.CORS.CorsEnabled }}
    {{- template "CORS" map $server.CORS $server false }}
{{- end }}
{{- else }}
{{- range $location := $server.Locations }}
{{- if $location.CORS.CorsEnabled }}
    {{- template "CORS" map $location.CORS $server $location }}
{{- end }}
{{- end }}{{/* if $cors.CorsEnabled */}}
{{- end }}{{/* if/else $server.CORS */}}
{{- end }}{{/* range $servers */}}

{{- /*------------------------------------*/}}
{{- range $server := $servers }}
{{- range $location := $server.Locations }}
{{- if not $location.IsRootLocation }}
    use_backend {{ $location.Backend }} if {{ $server.ACLLabel }} { var(txn.path) -m beg {{ $location.Path }} }
{{- else if $server.ACLLabel }}
    use_backend {{ $location.Backend }} if {{ $server.ACLLabel }}
{{- end }}
{{- end }}
{{- end }}
{{- if $isShared }}
    default_backend httpback-default-backend
{{- else if $isDefault }}
    default_backend {{ $ing.DefaultServer.RootLocation.Backend }}
{{- else if $isCACert }}
    default_backend httpback-shared-backend
{{- end }}

{{- end }}{{/* define "http_front" */}}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "acl" }}
{{- $cfg := .p1 }}
{{- $server := .p2 }}
{{- $fetch := .p3 }}
{{- $needport := .p4 }}
{{- if ne $server.ACLLabel "" }}
{{- if $server.HostnameIsWildcard }}
    acl {{ $server.ACLLabel }} {{ $fetch }} -m reg -i {{ hostnameRegex $server.Hostname }}
{{- else }}
    acl {{ $server.ACLLabel }} {{ $fetch }} -i {{ $server.Hostname }}{{ if $needport }} {{ $server.Hostname }}:80 {{ $server.Hostname }}:443{{ if and $cfg.HTTPStoHTTPPort (ne $cfg.HTTPStoHTTPPort 80) }} {{ $server.Hostname }}:{{ $cfg.HTTPStoHTTPPort }}{{ end }}{{ end }}
{{- end }}
{{- if ne $server.Alias "" }}
{{- if $server.AliasIsRegex }}
    acl {{ $server.ACLLabel }} {{ $fetch }} -m reg -i '{{ aliasRegex $server.Alias }}'
{{- else }}
    acl {{ $server.ACLLabel }} {{ $fetch }} -i {{ $server.Alias }}{{ if $needport }} {{ $server.Alias }}:80 {{ $server.Alias }}:443{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}{{/* define "acl" */}}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "CORS" }}
{{- $cors := .p1 }}
{{- $server := .p2 }}
{{- $location := .p3 }}
    # start CORS preflight - {{ $server.Hostname }}{{ if $location }}{{ $location.Path }}{{ end }}
    http-response set-header Access-Control-Allow-Origin      "{{ $cors.CorsAllowOrigin }}" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    http-response set-header Access-Control-Allow-Methods     "{{ $cors.CorsAllowMethods }}" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    http-response set-header Access-Control-Allow-Headers     "{{ $cors.CorsAllowHeaders }}" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
{{- if $cors.CorsAllowCredentials }}
    http-response set-header Access-Control-Allow-Credentials "{{ $cors.CorsAllowCredentials }}" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
{{- end }}
    http-response set-header Access-Control-Max-Age           "{{ $cors.CorsMaxAge }}" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    http-response set-header Content-Type                     "text/plain" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    http-response set-header Content-Length                   "0" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    http-response set-status 204 reason "No Content" if METH_OPTIONS {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    # end CORS preflight - {{ $server.Hostname }}{{ if $location }}{{ $location.Path }}{{ end }}
    http-response set-header Access-Control-Allow-Origin      "{{ $cors.CorsAllowOrigin }}" if {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
{{- if $cors.CorsAllowCredentials }}
    http-response set-header Access-Control-Allow-Credentials "{{ $cors.CorsAllowCredentials }}" if {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
{{- end }}
    http-response set-header Access-Control-Allow-Methods     "{{ $cors.CorsAllowMethods }}" if {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    http-response set-header Access-Control-Allow-Headers     "{{ $cors.CorsAllowHeaders }}" if {{ $server.ACLLabel }}{{ if $location }}{{ $location.HAMatchTxnPath }}{{ end }}
    # end CORS - {{ $server.Hostname }}{{ if $location }}{{ $location.Path }}{{ end }}
{{- end }}{{/* define "CORS" */}}

######
###### Error pages
######
backend error413
    mode http
    errorfile 400 /usr/local/etc/haproxy/errors/413.http
    http-request deny deny_status 400
backend error495
    mode http
    errorfile 400 /usr/local/etc/haproxy/errors/495.http
    http-request deny deny_status 400
backend error496
    mode http
    errorfile 400 /usr/local/etc/haproxy/errors/496.http
    http-request deny deny_status 400
listen error503noendpoints
    bind 127.0.0.1:8181
    mode http
    errorfile 503 /usr/local/etc/haproxy/errors/503noendpoints.http

######
###### Stats page
######
listen stats
    bind {{ $cfg.BindIPAddrStats }}:{{ $cfg.StatsPort }}{{ if $cfg.StatsProxyProtocol }} accept-proxy{{ end }}
    mode http
    stats enable
    stats realm HAProxy\ Statistics
{{- if ne $cfg.StatsAuth "" }}
    stats auth {{ $cfg.StatsAuth }}
{{- end }}
    stats uri /
    no log

######
###### Monitor URI
######
frontend healthz
    bind {{ $cfg.BindIPAddrHealthz }}:{{ $cfg.HealthzPort }}
    mode http
    monitor-uri /healthz
    no log

######
###### Backend Health Monitors
######
{{- range $backend := $ing.Backends }}
{{- if gt $backend.MonitorPort 0 }}
frontend {{ $backend.Name }}-monitor
    bind *:{{ $backend.MonitorPort }}
    mode http
    acl {{ $backend.Name }}_down nbsrv({{ $backend.Name }}) lt 1
    monitor-uri /healthz
    monitor     fail if {{ $backend.Name }}_down
    no log
{{- end }}
{{- end }}
